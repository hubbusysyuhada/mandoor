import * as qs from "qs"
import { FastifyReply, FastifyRequest } from "fastify";
import { AppDataSource, QueryProps } from "../database/index";
import { User } from "../database/entity/User";

export default class {
  static async getUser(req: FastifyRequest<{ Params: { external_id: string } }>, rep: FastifyReply) {
    const external_id = req.params.external_id
    const data = await AppDataSource.getRepository(User).findOneBy({ external_id })
    return rep.code(200).send({ data })
  }

  static async register(req: FastifyRequest<{ Body: { external_id: string; password: string } }>, rep: FastifyReply) {
    const existingUser = await AppDataSource.getRepository(User).findOneBy({ external_id: req.body.external_id })
    if (existingUser) return rep.code(400).send({ message: "User already existed!" })
    const user = new User()
    for (const key in req.body) {
      if (key === 'password') req.body[key] = await req.bcryptHash(req.body[key])
      user[key] = req.body[key]
    }
    try {
      await AppDataSource.manager.save(user)
      return rep.code(201).send({ message: "User created" })
    } catch (error) {
      return rep.code(400).send({ error })
    }
  }

  static async logIn(req: FastifyRequest<{ Body: { external_id: string; password: string } }>, rep: FastifyReply) {
    const external_id = req.body.external_id
    const user = await AppDataSource.getRepository(User).findOneBy({ external_id })
    if (user) {
      const isPasswordCorrect = await req.bcryptCompare(req.body.password, user.password)
      if (isPasswordCorrect) {
        return rep.code(200).send({ token: req.server.jwt.sign(user, { expiresIn: '1w' }) })
      }
    }
    return rep.code(400).send({ message: "invalid External Id / Password" })
  }

  static async profile(req: FastifyRequest<{ Params: { external_id: string } }>, rep: FastifyReply) {
    const external_id = req.user.external_id
    const data = await AppDataSource.getRepository(User).findOneBy({ external_id })
    return rep.code(200).send({ data })
  }

  static async changePassword(req: FastifyRequest<{ Body: { external_id: string; password: string; newPassword: string; } }>, rep: FastifyReply) {
    const external_id = req.body.external_id
    if (!req.body.newPassword) return rep.code(400).send({message: "new password must not empty"})
    const user = await AppDataSource.getRepository(User).findOneBy({ external_id })
    if (user) {
      const isPasswordCorrect = await req.bcryptCompare(req.body.password, user.password)
      if (isPasswordCorrect) {
        user.password = await req.bcryptHash(req.body.newPassword)
        await AppDataSource.getRepository(User).manager.save(user)
        return rep.code(200).send({ message: "Password changed" })
      }
    }
    return rep.code(400).send({ message: "invalid External Id / Password" })
  }

 
}